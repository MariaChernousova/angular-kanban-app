"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_engine_1 = require("@nguniversal/express-engine");
const express = require("express");
const in_memory_cache_storage_1 = require("../cache/in-memory-cache.storage");
const DEFAULT_CACHE_EXPIRATION_TIME = 60000;
function setupUniversal(app, ngOptions) {
    const cacheOptions = getCacheOptions(ngOptions);
    app.engine('html', (_, options, callback) => {
        const originalUrl = options.req.originalUrl;
        if (cacheOptions.isEnabled) {
            const cacheHtml = cacheOptions.storage.get(originalUrl);
            if (cacheHtml) {
                return callback(null, cacheHtml);
            }
        }
        express_engine_1.ngExpressEngine({
            bootstrap: ngOptions.bootstrap,
            providers: [
                {
                    provide: 'serverUrl',
                    useValue: `${options.req.protocol}://${options.req.get('host')}`
                },
                ...(ngOptions.extraProviders || [])
            ]
        })(_, options, (err, html) => {
            if (cacheOptions.isEnabled) {
                cacheOptions.storage.set(originalUrl, html, cacheOptions.expiresIn);
            }
            callback(null, html);
        });
    });
    app.set('view engine', 'html');
    app.set('views', ngOptions.viewsPath);
    app.get(ngOptions.rootStaticPath, express.static(ngOptions.viewsPath, {
        maxAge: 600
    }));
}
exports.setupUniversal = setupUniversal;
function getCacheOptions(ngOptions) {
    if (!ngOptions.cache) {
        return {
            isEnabled: false
        };
    }
    if (typeof ngOptions.cache !== 'object') {
        return {
            isEnabled: true,
            storage: new in_memory_cache_storage_1.InMemoryCacheStorage(),
            expiresIn: DEFAULT_CACHE_EXPIRATION_TIME
        };
    }
    return {
        isEnabled: true,
        storage: ngOptions.cache.storage || new in_memory_cache_storage_1.InMemoryCacheStorage(),
        expiresIn: ngOptions.cache.expiresIn || DEFAULT_CACHE_EXPIRATION_TIME
    };
}
exports.getCacheOptions = getCacheOptions;
